CTCI

1.1 : Implement algorithm to determine if a string has all unique characters. What if you cannot use additional data structures?

  VERSION 1: With a buffer
    MAIN IDEA:
      Boolean array of length 128 (number unique ascii characters)
      Check if flag has already been set to true for each character in string
    ANALYSIS:
      TIME:   O(N) where N = length of string
      SPACE:  O(1)
    PSEUDOCODE:
      boolean isUnique(String str):
        if str has length greater than 128 return false
        chars <- boolean array size 128
        for i = 0 to str.length:
          int val = str.charAt(i)
          if chars[val] == true
            return false
          else
            chars[val] = true
        return true

  VERSION 2: With No Buffer
    MAIN IDEA:
      Use a bit vector (can be done using two longs)
      Check if flag has already been set to true for each character in string
    ANALYSIS:
      TIME:   O(N) where N = length of string
      SPACE:  O(1) but 1/8 of space used by version 1
    PSEUDOCODE:
      boolean isUnique(String str):
        chars1 <- long (64 bits)
        chars2 <- long (64 bits)
        for i = 0 to str.length:
          int val = str.charAt(i)
          if (val / 64 == 0)
            val = val % 64
            if the val bit of chars1 is 1
              return false
            set val bit of chars1 to 1
          else
            val = val % 64
            if the val bit of chars2 is 1
              return false
            set val bit of chars2 to 1

1.3 : Given two strings, write a method to decided if one is a permutation of the other.

    MAIN IDEA:
        Use an integer array of length 128 (number unique ascii characters)
        Increment count for each character in one string
        Decrement count for each character in other string
        If count of a character ever gets negative return false

    ANALYSIS:
        TIME:   O(N)
        SPACE:  O(1)

    PSEUDOCODE:
        boolean isPermutation(String s1, String s2):
            if s1 and s2 have different lengths
                return false
            chars <- int [128]
            for character c in s1
                chars[c]++
            for character c in s2
                if --chars[c] < 0
                    return false
            return true


1.4: Write a method to replace all spaces in a string with '%20'. You may assume that the string has sufficient space at the end of the string to hold the additional characters, and that you are given the "true" length of the string. (Note: if implementing in Java, please use a character array so that you can perform this operation in place.)

    MAIN IDEA:
        Two scans -
         1. Calculate the new length of the string (orig + 2 * numberSpaces)
         2. Place null terminator at array[length2]
            Reverse iterate through string
                Put '0''2''%' in places corresponding to spaces

    ANALYSIS:
        TIME:   O(N) where N is length of new string
        SPACE:

    PSEUDOCODE:
        void replaceSpaces(char[] str, int length):
            spaceCount = 0
            for character c in str
                if c is a space, increment spaceCount
            length2 <- length + 2*spaceCount
            str[length2] <- '\0'

            for i = length - 1 to 0
                if str[i] is a space
                    str[length2-1] <- '%'
                    str[length2-2] <- '0'
                    str[length2-3] <- '2'
                    decrement length2 by 3
                else
                    str[length-1] <- str[i]
                    decrement length2 by 1

1.5 (RUN LENGTH COMPRESSION) Implement a method to perform basic string compression using the counts of repeated characters. For example, the string aabcccccaaa would become a2b1c5a3. If the "compressed" string would not become larger than the original string, your method should return the original string. You can assume the string has only upper and lower case letters (a-z)

    MAIN IDEA:
        Determine the compressed length of the string, ensure less than normal
            *** Make sure to use String.valueOf(runLength).value()
        Use StringBuffer to build new compressed string
        Don't forget to add size for / append last run

    ANALYSIS:

    PSEUDOCODE:
        int getCompressedLength(String str):
            if str is null or empty return 0

            length = 0
            runLength = 1
            prev <- str.charAt(0)
            for i = 1 to str.length
                curr <- str.charAt(i)
                if curr == prev
                    runLength++
                else
                    prev <- curr
                    length += 1 + String.valueOf(runLength).size()

            length += 1 + String.valueOf(runLength).size()
            return length

        String getCompression(String str):
            compressedLength <- getCompressedLength(str)
            if compressedLength >= str.length
                return str
            buff <- new StringBuffer
            runLength <- 1
            prev <- str.charAt(0)
            for i = 1 to str.length
                curr <- str.charAt(i)
                if curr == prev
                    runLength += 1
                else
                    buff.append(prev)
                    buff.append(runLength)
                    prev <- curr
                    runLength = 1
            buff.append(prev)
            buff.append(runLength)
            return buff.toString

1.8 Assume you have a method isSubstring which checks if one word is a substring of another. Given two strings, s1 and s2, write code to check if s2 is a rotation of s1 using only one call to isSubstring (e.g. "waterbottle" is a rotation of "erbottlewat").

PIE

1. (FIRST NONREPEATED CHARACTER) Write an efficient function to find the first nonrepeated character in a string.

    MAIN IDEA:
        Create a hash map of characters to integers (counts)
        Scan string, building hash table
        Search hash table in order of string, if counts==1 return character
