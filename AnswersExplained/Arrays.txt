CTCI

1.6 Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a method to rotate the image by 90 degrees. Can you do this in place?


1.7 Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are set to 0.

    MAIN IDEA:
        Keep two boolean arrays of what to nullify (columns, rows)
        Iterate through each element, when get to a 0 mark row and column
        Nullify rows and columns separately

    ANALYSIS:
        TIME:   O(M*N)
        SPACE:  O(1)

    PSEUDOCODE:
        void nullify(int[M][N] matrix):
            nullRows <- boolean [M]
            nullCols <- boolean [N]
            for i = 0 to M
                for j = 0 to N
                    if matrix[i][j] is 0
                        nullRows[i] <- true
                        nullCols[j] <- true
            for i = 0 to M
                if nullRows[i]
                    nullifyRow(i)
            for j = 0 to N
                if nullCols[j]
                    nullifyCol(j)


EOPI

6.1 (DUTCH NATIONAL FLAG) Write a function that takes an array A and an index i into A, and rearranges the elements such that all elements less than A[i] appear first, followed by elements equal to A[i], followed by elements greater than A[i]. Your algorithm should have O(1) space complexity and O(|A|) time complexity.

    MAIN IDEA:
        Maintain four groups using the following pointers:
            smaller:    end of BOTTOM           A[0...smaller-1]        <  pivot
            runner:     end of MIDDLE           A[smaller...runner-1]   == pivot
                        beginning of UNKNOWN    A[runner...bigger]      ?  pivot
            bigger:     beginning of TOP        A[bigger+1...length-1]  >  pivot
        Explore UNKNOWN items in order, swapping them into correct group
            item < pivot: swap into end of BOTTOM (increase size by 1), move on
            item == pivot: move on
            item > pivot: swap into beginning of TOP (increase size by 1)
        Each iteration decreases size of UNKNOWN group by 1

    ANALYSIS:
        TIME:   O(|A|)  Each iteration decreases unclassified group size by 1
        SPACE:  O(1)    Use smaller, runner, and larger pointers

    PSEUDOCODE:
        void dutchNationalFlag(int [] A, int index):
            pivot = A[index]
            smaller = 0, runner = 0, bigger = A.length - 1
            while runner <= bigger
                if A[runner] < pivot
                    swap(A, smaller++, runner++)// increase bottom shift middle
                else if A[runner] == pivot
                    runner++                    // increase middle
                else
                    swap(A, runner, bigger--)   // increase top
